{"id":604546641,"lang":"cpp","time":"6 months, 4 weeks","timestamp":1640020518,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/604546641/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"47.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    std::vector<TreeNode *> sortedArr;\n    \n    TreeNode* balanceBST(TreeNode* root) {\n        inorderTraverse(root);\n        return sortedArrToBST(0, sortedArr.size() - 1);\n    }\n    \n    void inorderTraverse(TreeNode *root)\n    {\n        if(!root)\n        {\n            return;\n        }\n        inorderTraverse(root->left);\n        sortedArr.push_back(root);\n        inorderTraverse(root->right);\n    }\n    \n    TreeNode *sortedArrToBST(int start, int end)\n    {\n        if(start > end)\n        {\n            return NULL;\n        }\n        int mid = (start + end)/2;\n        TreeNode *root = sortedArr[mid];\n        root->left = sortedArrToBST(start, mid-1);\n        root->right = sortedArrToBST(mid+1, end);\n        return root;\n    }\n    \n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree"}