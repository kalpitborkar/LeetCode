{"id":720237743,"lang":"cpp","time":"1Â month","timestamp":1655014330,"status_display":"Accepted","runtime":"177 ms","url":"/submissions/detail/720237743/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"47.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    std::vector<TreeNode*> sorted;\n    \n    void inorder(TreeNode *root)\n    {\n        if(!root) return;\n        inorder(root->left);\n        sorted.push_back(root);\n        inorder(root->right);\n    }\n    \n    TreeNode* createBSTfromArr(std::vector<TreeNode*> &arr, int left, int right)\n    {\n        if(left >= right) return nullptr;\n        int mid = left + (right - left)/2;\n        TreeNode *root = arr[mid];\n        root->left = createBSTfromArr(arr, left, mid);\n        root->right = createBSTfromArr(arr, mid+1, right);\n        return root;\n    }\n    \n    TreeNode* balanceBST(TreeNode* root) {\n        inorder(root);\n        return createBSTfromArr(sorted, 0, sorted.size());\n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree"}