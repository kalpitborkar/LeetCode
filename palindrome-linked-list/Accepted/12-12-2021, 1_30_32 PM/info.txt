{"id":600640470,"lang":"cpp","time":"7Â months","timestamp":1639296032,"status_display":"Accepted","runtime":"216 ms","url":"/submissions/detail/600640470/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"118 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *reverse(ListNode *root)\n    {\n        if(!root) return NULL;\n        ListNode *prev = NULL, *next;\n        \n        while(root)\n        {\n            next = root->next;\n            root->next = prev;\n            prev = root;\n            root = next;\n        }\n        return prev;\n    }\n    \n    bool isPalindrome(ListNode* head) {\n        if(!head) return true;\n        \n        ListNode *slow = head, *fast = head;\n        while(fast->next && fast->next->next)\n        {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        slow->next = reverse(slow->next);\n        \n        slow = slow->next;\n        while(slow)\n        {\n            if(slow->val != head->val)\n            {\n                return false;\n            }\n            slow = slow->next;\n            head = head->next;\n        }\n        return true;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list"}