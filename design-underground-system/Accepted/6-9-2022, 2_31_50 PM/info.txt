{"id":717986052,"lang":"cpp","time":"1 month, 1 week","timestamp":1654765310,"status_display":"Accepted","runtime":"165 ms","url":"/submissions/detail/717986052/","is_pending":"Not Pending","title":"Design Underground System","memory":"58.8 MB","code":"class UndergroundSystem {\npublic:\n    std::unordered_map<int, std::pair<std::string, int>> checkInMap;\n    std::unordered_map<std::string, std::pair<double, int>> routeMap;\n    UndergroundSystem() {\n    }\n    \n    void checkIn(int id, string stationName, int t) {\n        checkInMap[id] = {stationName, t};\n    }\n    \n    void checkOut(int id, string stationName, int t) {\n        auto checkIn = checkInMap[id];\n        checkInMap.erase(id);\n        \n        std::string route = checkIn.first + \"_\" + stationName;\n        routeMap[route].first += t - checkIn.second;\n        routeMap[route].second++;\n    }\n    \n    double getAverageTime(string startStation, string endStation) {\n        std::string routeName = startStation + \"_\" + endStation;\n        auto route = routeMap[routeName];\n        return (route.first/route.second);\n    }\n};\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem* obj = new UndergroundSystem();\n * obj->checkIn(id,stationName,t);\n * obj->checkOut(id,stationName,t);\n * double param_3 = obj->getAverageTime(startStation,endStation);\n */","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"design-underground-system"}