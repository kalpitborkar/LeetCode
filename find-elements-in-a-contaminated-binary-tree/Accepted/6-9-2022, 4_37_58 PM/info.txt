{"id":718048944,"lang":"cpp","time":"1 month, 1 week","timestamp":1654772878,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/718048944/","is_pending":"Not Pending","title":"Find Elements in a Contaminated Binary Tree","memory":"33 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass FindElements {\npublic:\n    std::set<int> set;\n    void recover(TreeNode *root, int x)\n    {\n        if(!root) return;\n        root->val = x;\n        set.emplace(x);\n        recover(root->left, 2*x+1);\n        recover(root->right, 2*x+2);\n    }\n    FindElements(TreeNode* root) {\n        recover(root, 0);\n    }\n    \n    bool find(int target) {\n        return (set.find(target) != set.end());\n    }\n};\n\n/**\n * Your FindElements object will be instantiated and called as such:\n * FindElements* obj = new FindElements(root);\n * bool param_1 = obj->find(target);\n */","compare_result":"1111111111111111111111111111111","title_slug":"find-elements-in-a-contaminated-binary-tree"}