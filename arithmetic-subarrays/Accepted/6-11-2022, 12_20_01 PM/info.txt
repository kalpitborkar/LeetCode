{"id":719397597,"lang":"cpp","time":"1Â month","timestamp":1654930201,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/719397597/","is_pending":"Not Pending","title":"Arithmetic Subarrays","memory":"30.8 MB","code":"class Solution {\npublic:\n    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {\n        std::vector<bool> res;\n        \n        int m = l.size();\n        \n        for(int i = 0; i < m; i++)\n        {\n            std::vector<int> subArr = std::vector<int>(nums.begin()+l[i], nums.begin()+r[i]+1);\n            res.push_back(isArithmetic(subArr));\n        }\n        return res;\n    }\n    \n    bool isArithmetic(std::vector<int> arr)\n    {\n        std::sort(arr.begin(), arr.end());\n        int diff = arr[1] - arr[0];\n        int size = arr.size();\n        for(int i = 2; i < size; i++)\n        {\n            if(arr[i] - arr[i-1] != diff) return false;\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"arithmetic-subarrays"}