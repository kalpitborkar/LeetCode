{"id":694070143,"lang":"cpp","time":"2 months, 1 week","timestamp":1651810185,"status_display":"Accepted","runtime":"127 ms","url":"/submissions/detail/694070143/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"59.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int deepestLeavesSum(TreeNode* root) {\n        int max_depth = findDepth(root);\n        return findSum(root, 0, max_depth-1);\n    }\n    \n    int findDepth(TreeNode *root)\n    {\n        if(root == NULL) return 0;\n        return std::max(1+findDepth(root->left), 1+findDepth(root->right));\n    }\n    \n    int findSum(TreeNode *root, int depth, int max_depth)\n    {\n        if(root == NULL) return 0;\n        if(depth == max_depth) return root->val;\n        return findSum(root->left, depth+1, max_depth)+findSum(root->right, depth+1, max_depth);\n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"deepest-leaves-sum"}