{"id":604342977,"lang":"cpp","time":"6 months, 4 weeks","timestamp":1639981417,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/604342977/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"13.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int i = 0;\n    TreeNode* bstFromPreorder(vector<int>& preorder, int bound = INT_MAX) {\n        if(i == preorder.size() || preorder[i] > bound)\n        {\n            return NULL;\n        }\n        TreeNode *root = new TreeNode(preorder[i++]);\n        root->left = bstFromPreorder(preorder, root->val);\n        root->right = bstFromPreorder(preorder, bound);\n        return root;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal"}