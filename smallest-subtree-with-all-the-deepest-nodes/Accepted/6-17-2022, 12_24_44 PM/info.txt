{"id":724240837,"lang":"cpp","time":"4 weeks, 1 day","timestamp":1655448884,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/724240837/","is_pending":"Not Pending","title":"Smallest Subtree with all the Deepest Nodes","memory":"14.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* leastCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q)\n    {\n        if(!root || root == p || root == q) return root;\n        TreeNode *left = leastCommonAncestor(root->left, p, q);\n        TreeNode *right = leastCommonAncestor(root->right, p, q);\n        return !left? right: !right? left: root;\n    }\n    \n    TreeNode* subtreeWithAllDeepest(TreeNode* root) {\n        std::queue<TreeNode*> q;\n        q.push(root);\n        TreeNode* leftMost = NULL, *rightMost = NULL;\n        \n        while(!q.empty())\n        {\n            int n = q.size();\n            for(int i = 0; i < n; i++)\n            {\n                TreeNode* top = q.front();\n                if(i == 0) leftMost = top;\n                if(i == n-1) rightMost = top;\n                q.pop();\n                if(top->left) q.push(top->left);\n                if(top->right) q.push(top->right);\n            }\n        }\n        \n        return leastCommonAncestor(root, leftMost, rightMost);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subtree-with-all-the-deepest-nodes"}