{"id":695953734,"lang":"cpp","time":"2 months, 1 week","timestamp":1652077517,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/695953734/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"33.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> allPossibleFBT(int n) {\n        std::vector<TreeNode*> ans;\n        if(n < 1 || n%2 == 0) return ans;\n        for(int k = 2; k < n; k += 2)\n        {\n            std::vector<TreeNode*> t1 = allPossibleFBT(k-1);\n            std::vector<TreeNode*> t2 = allPossibleFBT(n-k);\n            int n1 = t1.size(), n2 = t2.size();\n            for(int i = 0; i < n1; i++)\n            {\n                for(int j = 0; j < n2; j++)\n                {\n                    TreeNode* newRoot = new TreeNode(0);\n                    newRoot->left = t1[i];\n                    newRoot->right = t2[j];\n                    ans.push_back(newRoot);\n                }\n            }\n        }\n        if(ans.empty()) ans.push_back(new TreeNode(0));\n        return ans;\n    }\n};","compare_result":"11111111111111111111","title_slug":"all-possible-full-binary-trees"}