{"id":605864152,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1640240112,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/605864152/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"25.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    std::set<int> to_delete_set;\n    std::vector<TreeNode *> result;\n    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {\n        for(int i : to_delete)\n        {\n            to_delete_set.insert(i);\n        }\n        helper(root, result, to_delete_set, true);\n        return result;\n    }\n    \n    TreeNode *helper(TreeNode *node,\n                    std::vector<TreeNode *> &result,\n                    std::set<int> &to_delete_set,\n                    bool is_root)\n    {\n        if(!node)\n        {\n            return NULL;\n        }\n        bool deleted = to_delete_set.find(node->val) != to_delete_set.end();\n        if(is_root && !deleted)\n        {\n            result.push_back(node);\n        }\n        node->left = helper(node->left, result, to_delete_set, deleted);\n        node->right = helper(node->right, result, to_delete_set, deleted);\n        return deleted ? NULL : node;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest"}