{"id":732340012,"lang":"cpp","time":"2 weeks, 5 days","timestamp":1656311281,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/732340012/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        int small = std::min(p->val, q->val);\n        int large = std::max(p->val, q->val);\n        \n        while(root)\n        {\n            if(root->val > large) root = root->left;\n            else if(root->val < small) root = root->right;\n            else return root;\n        }\n        return nullptr;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}