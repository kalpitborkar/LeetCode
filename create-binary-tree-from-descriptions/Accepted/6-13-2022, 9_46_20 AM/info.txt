{"id":720940634,"lang":"cpp","time":"1Â month","timestamp":1655093780,"status_display":"Accepted","runtime":"1756 ms","url":"/submissions/detail/720940634/","is_pending":"Not Pending","title":"Create Binary Tree From Descriptions","memory":"277.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n/*\n1. Create a map from int -> TreeNode* and bool->TreeNode* (isChild)\n2. Iterate through the descriptions:\n    3. Create currNode\n    4. Check for the child node - if it doesnt exist, create it. If it does exist, use the map.\n\n*/\n\nclass Solution {\npublic:\n    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {\n        std::unordered_map<int, TreeNode*> getNode;\n        std::unordered_map<int, bool> isChild;\n        \n        for(std::vector<int> &description: descriptions)\n        {\n            if(getNode.count(description[0]) == 0)\n            {\n                TreeNode *currNode = new TreeNode(description[0]);\n                getNode[description[0]] = currNode;\n            }\n            \n            if(getNode.count(description[1]) == 0)\n            {\n                TreeNode *childNode = new TreeNode(description[1]);\n                getNode[description[1]] = childNode;\n            }\n            if(description[2] == 1) getNode[description[0]]->left = getNode[description[1]];\n            else getNode[description[0]]->right = getNode[description[1]];\n            isChild[description[1]] = true;\n        }\n        \n        TreeNode *ans = NULL;\n        for(std::vector<int> &description: descriptions)\n        {\n            if(isChild[description[0]] != true)\n            {\n                ans = getNode[description[0]];\n                break;\n            }\n        }\n        return ans;\n    }\n};\n\n\n\n\n\n\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-binary-tree-from-descriptions"}