{"id":717882905,"lang":"cpp","time":"1 month, 1 week","timestamp":1654754815,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/717882905/","is_pending":"Not Pending","title":"Partition Labels","memory":"6.5 MB","code":"class Solution {\npublic:\n    vector<int> partitionLabels(string s) {\n        /*\n        1. Store the rightmost occurance of each character (first iteration)\n        2. Iterate through the string again:\n            3. current pointer\n            4. right pointer = max(rightmost occurance of all characters encountered so far)\n            5. When current pointer and right pointer collide - partition\n            6. Continue \n        */\n        \n        std::vector<int> last_occurance(27);\n        std::vector<int> res;\n\n        for(int i = 0; i < s.size(); i++)\n        {\n            last_occurance[s[i]-'a'] = std::max(i, last_occurance[s[i]-'a']);\n        }\n        \n        int right_index = 0;\n        int left_index = 0;\n        for(int current_index = 0; current_index < s.size(); current_index++)\n        {\n            right_index = std::max(last_occurance[s[current_index]-'a'], right_index);\n            if(current_index == right_index)\n            {\n                res.push_back(current_index - left_index + 1);\n                left_index = right_index + 1;\n            }\n        }\n        return res;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-labels"}