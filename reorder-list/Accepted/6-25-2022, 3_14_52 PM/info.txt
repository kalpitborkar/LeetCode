{"id":730762655,"lang":"cpp","time":"3Â weeks","timestamp":1656150292,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/730762655/","is_pending":"Not Pending","title":"Reorder List","memory":"17.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n        if(head == NULL || head->next == NULL) return;\n        \n        ListNode *slow = head, *fast = head, *l1 = head, *prev = NULL;\n        \n        while(fast && fast->next)\n        {\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        \n        prev->next = NULL;\n        ListNode *l2 = reverse(slow);\n        merge(l1, l2);\n    }\n    \n    ListNode *reverse(ListNode *head)\n    {\n        ListNode *prev = NULL, *curr = head, *next = NULL;\n        \n        while(curr)\n        {\n            next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        \n        return prev;\n    }\n    \n    void merge(ListNode *head1, ListNode *head2)\n    {\n        ListNode *next = NULL;\n        \n        while(head2)\n        {\n            next = head1->next;\n            head1->next = head2;\n            head1 = head2;\n            head2 = next;\n        }\n    }\n};","compare_result":"111111111111","title_slug":"reorder-list"}