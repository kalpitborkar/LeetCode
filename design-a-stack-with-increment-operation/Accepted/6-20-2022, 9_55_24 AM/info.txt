{"id":726437215,"lang":"cpp","time":"3 weeks, 5 days","timestamp":1655699124,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/726437215/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"21 MB","code":"class CustomStack {\npublic:\n    int max;\n    std::vector<int> stk;\n    \n    CustomStack(int maxSize) {\n        max = maxSize;\n    }\n    \n    void push(int x) {\n        if(stk.size() < max) stk.push_back(x);\n    }\n    \n    int pop() {\n        if(stk.size() == 0) return -1;\n        int back = stk.back();\n        stk.pop_back();\n        return back;\n    }\n    \n    void increment(int k, int val) {\n        int min = k;\n        if(stk.size() < k) min = stk.size();\n        \n        for(int i = 0; i < min; i++)\n        {\n            stk[i] += val;\n        }\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */","compare_result":"1111111111111111111111111111111111","title_slug":"design-a-stack-with-increment-operation"}